/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.navaile.enigma4k;

import javax.swing.JFrame;

/**
 * About dialog window.
 * 
 * @author vladpaln
 */
public class AboutDialog extends javax.swing.JDialog {
	
	private static final String about =
		"<html>" +
		"<body style=\"font: 12px verdana;\">" +
		"<b>Parameters</b> - Both parties must have this information.<br />" +
		"Rotor #: Number of rotors.<br />" +
		"Plugboard #: Number of plugboards.<br />" +
		"Recipient: Recipient email or online handle. Used to encrypt message.<br />" +
		"Crypt Phrase: A pass phrase used to encrypt/decrypt text.<br />" +
		"Text - Plain text to be encrypted or crypt text to be decrypted.<br /><br />" +

		"Additional Parameters - For increased security.<br />" +
		"Directory Seed: Used to randomize directory. Default is blank.<br /><br />" +

		"<b>About Crypto</b><br />" +
		"Crypto design is based on several crypt machines including Enigma, Fialka and " +
		"SIGABA. Atempts have been made to remove known weeknesses. The number of rotors and " +
		"plugboards can now be set to any value between 97 and 4K. The only limitation is " +
		"system memory that holds all of the rotors and plugboard data. The reflector has also " +
		"been removed and rotors now have 46,655 values.<br /><br />" +

		"<b>Features</b><br />" +
		"- each message will have a different seed<br />" +
		"- no reflector, value can map to itself<br />" +
		"- random step size for each rotor step<br />" +
		"- random rotor direction rotation, direction randomly changes<br />" +
		"- actual rotor/plugboard count is randomly selected within 90% \u00B1 10% of provided value<br />" +
		"- word directory can be randomized by providing a seed<br />";

	/*
		"<b>How Crypto Works</b><br />" +
		"Crypto encryption starts by first converting words into their numeric equivalent " +
		"using a directory. Instead of encoding letters Crypto encodes entire words. Next " +
		"a seed is generated using the pass phrase and email/handle. The generated seed is used " +
		"to spawn random rotors, plugboards, rotor step direction, and rotor step size. The encoded " +
		"value is passed through a plugboards => rotors sequence before converting the final value " +
		"to base36 text.<br /><br />" +
		"</body></html>";
	*/

	/** Creates new form AboutDialog			*/
	public AboutDialog(JFrame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		
		if(aboutPane != null) {
			aboutPane.setText(about);
			aboutPane.setCaretPosition(0);
		}
		
		setTitle("About Crypto " + Crypt.VER);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        aboutPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("About Crypto");
        setLocation(new java.awt.Point(450, 75));

        closeButton.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        aboutPane.setEditable(false);
        aboutPane.setBackground(new java.awt.Color(240, 240, 240));
        aboutPane.setContentType("text/html"); // NOI18N
        aboutPane.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(aboutPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 700, Short.MAX_VALUE)
                        .addComponent(closeButton))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
		this.setVisible(false);
		this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane aboutPane;
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
